version: '3.8'

name: fullstack-project-hybrid

services:
  # ===========================================
  # SHARED INFRASTRUCTURE
  # ===========================================
  
  # Shared Database (Auth + User Services)
  shared-user-db:
    image: mysql:8.0
    container_name: shared-user-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: shared_root_password_2024
      MYSQL_DATABASE: shared_user_db
      MYSQL_USER: shared_user
      MYSQL_PASSWORD: shared_password_2024
    ports:
      - "3306:3306"
    volumes:
      - shared_user_db_data:/var/lib/mysql
      # - ./shared-database/init:/docker-entrypoint-initdb.d  # Optional init scripts
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pshared_root_password_2024"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Shared Redis (All Services)
  shared-redis:
    image: redis:7-alpine
    container_name: shared-redis
    restart: unless-stopped
    command: redis-server --requirepass shared_redis_password_2024
    ports:
      - "6379:6379"
    volumes:
      - shared_redis_data:/data
      # - ./shared-redis/redis.conf:/usr/local/etc/redis/redis.conf  # Optional config file
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "shared_redis_password_2024", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s

  # Consul Config Server (Centralized Configuration Management)
  consul:
    image: hashicorp/consul:1.17
    container_name: consul-server
    restart: unless-stopped
    command: agent -server -ui -bootstrap-expect=1 -client=0.0.0.0 -bind=0.0.0.0
    ports:
      - "8500:8500"  # HTTP API & UI
      - "8600:8600/tcp"  # DNS (TCP)
      - "8600:8600/udp"  # DNS (UDP)
    volumes:
      - consul_data:/consul/data
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 30s
    environment:
      CONSUL_BIND_INTERFACE: eth0
      CONSUL_CLIENT_INTERFACE: eth0

  # ===========================================
  # CORE SERVICES (Shared Database)
  # ===========================================
  
  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: auth-service
      PORT: 3001
      # Shared Database Configuration
      DB_HOST: shared-user-db
      DB_PORT: 3306
      DB_USERNAME: shared_user
      DB_PASSWORD: shared_password_2024
      DB_NAME: shared_user_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: auth
      # JWT Configuration
      JWT_SECRET: your-jwt-secret-key-change-in-production
      JWT_EXPIRATION: 24h
      # Kong Integration Configuration
      KONG_ADMIN_URL: http://kong-gateway:8001
      KONG_ADMIN_TOKEN: ""
      KONG_SYNC_ENABLED: "true"
    ports:
      - "3001:3001"
    depends_on:
      shared-user-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/v1/auth/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile.simple
    container_name: user-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: user-service
      PORT: 3003
      # Consul Configuration
      CONSUL_HOST: consul-server
      CONSUL_PORT: 8500
      CONSUL_SCHEME: http
      # Shared Database Configuration
      DB_HOST: shared-user-db
      DB_PORT: 3306
      DB_USERNAME: shared_user
      DB_PASSWORD: shared_password_2024
      DB_DATABASE: shared_user_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: user
    ports:
      - "3003:3003"
    depends_on:
      shared-user-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/api/v1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # ===========================================
  # BUSINESS SERVICES (Separate Databases)
  # ===========================================
  
  # Customer Service Database
  customer-service-db:
    image: mysql:8.0
    container_name: customer-service-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: customer_root_password
      MYSQL_DATABASE: customer_service_db
      MYSQL_USER: customer_user
      MYSQL_PASSWORD: customer_password
    ports:
      - "3309:3306"
    volumes:
      - customer_service_db_data:/var/lib/mysql
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pcustomer_root_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Customer Service
  customer-service:
    build:
      context: .
      dockerfile: customer-service/Dockerfile
    container_name: customer-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: customer-service
      PORT: 3004
      # Consul Configuration
      CONSUL_HOST: consul-server
      CONSUL_PORT: 8500
      CONSUL_SCHEME: http
      # Separate Database Configuration
      DB_HOST: customer-service-db
      DB_PORT: 3306
      DB_USERNAME: customer_user
      DB_PASSWORD: customer_password
      DB_NAME: customer_service_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: customer
      # Cross-Service Communication
      USER_SERVICE_URL: http://user-service:3003
    ports:
      - "3004:3004"
    depends_on:
      customer-service-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/api/v1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # Carrier Service Database
  carrier-service-db:
    image: mysql:8.0
    container_name: carrier-service-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: carrier_root_password
      MYSQL_DATABASE: carrier_service_db
      MYSQL_USER: carrier_user
      MYSQL_PASSWORD: carrier_password
    ports:
      - "3310:3306"
    volumes:
      - carrier_service_db_data:/var/lib/mysql
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pcarrier_root_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Carrier Service
  carrier-service:
    build:
      context: .
      dockerfile: carrier-service/Dockerfile
    container_name: carrier-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: carrier-service
      PORT: 3005
      # Consul Configuration
      CONSUL_HOST: consul-server
      CONSUL_PORT: 8500
      CONSUL_SCHEME: http
      # Separate Database Configuration
      DB_HOST: carrier-service-db
      DB_PORT: 3306
      DB_USERNAME: carrier_user
      DB_PASSWORD: carrier_password
      DB_NAME: carrier_service_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: carrier
      # Cross-Service Communication
      USER_SERVICE_URL: http://user-service:3003
    ports:
      - "3005:3005"
    depends_on:
      carrier-service-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/api/v1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # Pricing Service Database
  pricing-service-db:
    image: mysql:8.0
    container_name: pricing-service-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: pricing_root_password
      MYSQL_DATABASE: pricing_service_db
      MYSQL_USER: pricing_user
      MYSQL_PASSWORD: pricing_password
    ports:
      - "3311:3306"
    volumes:
      - pricing_service_db_data:/var/lib/mysql
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppricing_root_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Pricing Service
  pricing-service:
    build:
      context: .
      dockerfile: ./pricing-service/Dockerfile
    container_name: pricing-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: pricing-service
      PORT: 3006
      # Consul Configuration
      CONSUL_HOST: consul-server
      CONSUL_PORT: 8500
      CONSUL_SCHEME: http
      # Separate Database Configuration
      DB_HOST: pricing-service-db
      DB_PORT: 3306
      DB_USERNAME: pricing_user
      DB_PASSWORD: pricing_password
      DB_NAME: pricing_service_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: pricing
      # Cross-Service Communication
      CUSTOMER_SERVICE_URL: http://customer-service:3004
      CARRIER_SERVICE_URL: http://carrier-service:3005
    ports:
      - "3006:3006"
    depends_on:
      pricing-service-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
      customer-service:
        condition: service_healthy
      carrier-service:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/api/v1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # Translation Service Database
  translation-service-db:
    image: mysql:8.0
    container_name: translation-service-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: translation_root_password
      MYSQL_DATABASE: translation_service_db
      MYSQL_USER: translation_user
      MYSQL_PASSWORD: translation_password
    ports:
      - "3312:3306"
    volumes:
      - translation_service_db_data:/var/lib/mysql
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ptranslation_root_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Translation Service
  translation-service:
    build:
      context: .
      dockerfile: translation-service/Dockerfile
    container_name: translation-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: translation-service
      PORT: 3007
      # Separate Database Configuration
      DB_HOST: translation-service-db
      DB_PORT: 3306
      DB_USERNAME: translation_user
      DB_PASSWORD: translation_password
      DB_NAME: translation_service_db
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_KEY_PREFIX: translation
    ports:
      - "3007:3007"
    depends_on:
      translation-service-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/api/v1/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # ===========================================
  # SELLER SERVICE (E-COMMERCE)
  # ===========================================
  
  # Seller Service Database
  seller-service-db:
    image: mysql:8.0
    container_name: seller-service-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: seller_db
      MYSQL_USER: seller_user
      MYSQL_PASSWORD: seller_password
    ports:
      - "3313:3306"
    volumes:
      - seller_service_db_data:/var/lib/mysql
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "seller_user", "-pseller_password"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Seller Service
  seller-service:
    build:
      context: .
      dockerfile: seller-service/Dockerfile
    container_name: seller-service
    restart: unless-stopped
    environment:
      NODE_ENV: development
      SERVICE_NAME: seller-service
      PORT: 3010
      # Database Configuration
      DB_HOST: seller-service-db
      DB_PORT: 3306
      DB_USERNAME: seller_user
      DB_PASSWORD: seller_password
      DB_DATABASE: seller_db
      # JWT Configuration
      JWT_SECRET: your-jwt-secret-key-change-in-production
      # Shared Redis Configuration
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shared_redis_password_2024
      REDIS_DB: 0
      REDIS_TTL: 3600
      # User Service Integration
      USER_SERVICE_URL: http://user-service:3003/api/v1
      USER_SERVICE_TIMEOUT: 5000
      # Cache Configuration
      CACHE_ENABLED: true
      CACHE_USER_TTL: 300
      CACHE_SELLER_TTL: 300
    ports:
      - "3010:3010"
    depends_on:
      seller-service-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - shared-services-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===========================================
  # FRONTEND
  # ===========================================
  
  # React Admin Frontend
  react-admin:
    build:
      context: ./react-admin
      dockerfile: Dockerfile
    container_name: react-admin
    restart: unless-stopped
    environment:
      REACT_APP_AUTH_API_URL: http://localhost:3001
      REACT_APP_USER_API_URL: http://localhost:3003
      REACT_APP_CUSTOMER_API_URL: http://localhost:3004
      REACT_APP_CARRIER_API_URL: http://localhost:3005
      REACT_APP_PRICING_API_URL: http://localhost:3006
      REACT_APP_TRANSLATION_API_URL: http://localhost:3007
      REACT_APP_SELLER_API_URL: http://localhost:3010
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - user-service
      - customer-service
      - carrier-service
      - pricing-service
      - translation-service
      - seller-service
    networks:
      - shared-services-network

volumes:
  # Shared Infrastructure Volumes
  shared_user_db_data:
    driver: local
  shared_redis_data:
    driver: local
  consul_data:
    driver: local
  
  # Business Services Volumes
  customer_service_db_data:
    driver: local
  carrier_service_db_data:
    driver: local
  pricing_service_db_data:
    driver: local
  translation_service_db_data:
    driver: local
  seller_service_db_data:
    driver: local

networks:
  shared-services-network:
    driver: bridge
    name: fullstack-project-hybrid-network
