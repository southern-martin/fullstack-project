# Multi-stage build for production optimization
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy shared infrastructure first (needed for user-service build)
COPY shared/infrastructure ./shared/infrastructure

# Build shared infrastructure
WORKDIR /app/shared/infrastructure
RUN npm ci && npm run build

# Switch to user-service directory
WORKDIR /app/user-service

# Copy package files for user-service
COPY user-service/package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci && npm cache clean --force

# Copy user-service source code
COPY user-service/ ./

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Create app user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Set working directory
WORKDIR /app/user-service

# Copy shared infrastructure to parent directory (for file: dependency resolution)
COPY --from=builder /app/shared/infrastructure /app/shared/infrastructure

# Copy package files
COPY user-service/package*.json ./

# Install only production dependencies (will create symlink to ../shared/infrastructure)
RUN npm ci --only=production && npm cache clean --force

# Copy built application
COPY --from=builder /app/user-service/dist ./dist

# Change ownership to non-root user (user-service and shared directories)
RUN chown -R nestjs:nodejs /app

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 3003

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3003/api/v1/health || exit 1

# Start the application
CMD ["node", "dist/main.js"]
