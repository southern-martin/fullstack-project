# Production Docker Compose for Custom VM Deployment
# Optimized for single-server deployment with external Nginx proxy

version: '3.8'

networks:
  fullstack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  shared-mysql-data:
    driver: local
  customer-mysql-data:
    driver: local
  carrier-mysql-data:
    driver: local
  pricing-mysql-data:
    driver: local
  redis-data:
    driver: local

services:
  # ==================== Infrastructure Services ====================
  
  # Shared MySQL Database (Auth + User Services)
  shared-user-db:
    image: mysql:8.0
    container_name: shared-user-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${SHARED_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${SHARED_DB_NAME:-shared_user_db}
      MYSQL_USER: ${SHARED_DB_USER:-appuser}
      MYSQL_PASSWORD: ${SHARED_DB_PASSWORD}
    volumes:
      - shared-mysql-data:/var/lib/mysql
    networks:
      - fullstack-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${SHARED_DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Customer Service Database
  customer-db:
    image: mysql:8.0
    container_name: customer-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${CUSTOMER_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${CUSTOMER_DB_NAME:-customer_db}
      MYSQL_USER: ${CUSTOMER_DB_USER:-appuser}
      MYSQL_PASSWORD: ${CUSTOMER_DB_PASSWORD}
    volumes:
      - customer-mysql-data:/var/lib/mysql
    networks:
      - fullstack-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${CUSTOMER_DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Carrier Service Database
  carrier-db:
    image: mysql:8.0
    container_name: carrier-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${CARRIER_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${CARRIER_DB_NAME:-carrier_db}
      MYSQL_USER: ${CARRIER_DB_USER:-appuser}
      MYSQL_PASSWORD: ${CARRIER_DB_PASSWORD}
    volumes:
      - carrier-mysql-data:/var/lib/mysql
    networks:
      - fullstack-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${CARRIER_DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Pricing Service Database
  pricing-db:
    image: mysql:8.0
    container_name: pricing-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${PRICING_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${PRICING_DB_NAME:-pricing_db}
      MYSQL_USER: ${PRICING_DB_USER:-appuser}
      MYSQL_PASSWORD: ${PRICING_DB_PASSWORD}
    volumes:
      - pricing-mysql-data:/var/lib/mysql
    networks:
      - fullstack-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${PRICING_DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache (Shared)
  shared-redis:
    image: redis:7-alpine
    container_name: shared-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================== Application Services ====================

  # Auth Service (NestJS)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_TYPE: mysql
      DB_HOST: shared-user-db
      DB_PORT: 3306
      DB_USERNAME: ${SHARED_DB_USER:-appuser}
      DB_PASSWORD: ${SHARED_DB_PASSWORD}
      DB_DATABASE: ${SHARED_DB_NAME:-shared_user_db}
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-7d}
    ports:
      - "3001:3001"
    depends_on:
      shared-user-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/api/v1/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # User Service (NestJS)
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3003
      DB_TYPE: mysql
      DB_HOST: shared-user-db
      DB_PORT: 3306
      DB_USERNAME: ${SHARED_DB_USER:-appuser}
      DB_PASSWORD: ${SHARED_DB_PASSWORD}
      DB_DATABASE: ${SHARED_DB_NAME:-shared_user_db}
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "3003:3003"
    depends_on:
      shared-user-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Customer Service (Go)
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    container_name: customer-service
    restart: unless-stopped
    environment:
      PORT: 3005
      DB_HOST: customer-db
      DB_PORT: 3306
      DB_USER: ${CUSTOMER_DB_USER:-appuser}
      DB_PASSWORD: ${CUSTOMER_DB_PASSWORD}
      DB_NAME: ${CUSTOMER_DB_NAME:-customer_db}
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3005:3005"
    depends_on:
      customer-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Carrier Service (Go)
  carrier-service:
    build:
      context: ./carrier-service
      dockerfile: Dockerfile
    container_name: carrier-service
    restart: unless-stopped
    environment:
      PORT: 3004
      DB_HOST: carrier-db
      DB_PORT: 3306
      DB_USER: ${CARRIER_DB_USER:-appuser}
      DB_PASSWORD: ${CARRIER_DB_PASSWORD}
      DB_NAME: ${CARRIER_DB_NAME:-carrier_db}
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3004:3004"
    depends_on:
      carrier-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Pricing Service (Go)
  pricing-service:
    build:
      context: ./pricing-service
      dockerfile: Dockerfile
    container_name: pricing-service
    restart: unless-stopped
    environment:
      PORT: 3006
      DB_HOST: pricing-db
      DB_PORT: 3306
      DB_USER: ${PRICING_DB_USER:-appuser}
      DB_PASSWORD: ${PRICING_DB_PASSWORD}
      DB_NAME: ${PRICING_DB_NAME:-pricing_db}
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3006:3006"
    depends_on:
      pricing-db:
        condition: service_healthy
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Translation Service (Go)
  translation-service:
    build:
      context: ./translation-service
      dockerfile: Dockerfile
    container_name: translation-service
    restart: unless-stopped
    environment:
      PORT: 3007
      REDIS_HOST: shared-redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "3007:3007"
    depends_on:
      shared-redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # React Admin Frontend
  react-admin:
    build:
      context: ./react-admin
      dockerfile: Dockerfile
      args:
        REACT_APP_AUTH_API_URL: ${REACT_APP_AUTH_API_URL:-http://localhost:3001}
        REACT_APP_USER_API_URL: ${REACT_APP_USER_API_URL:-http://localhost:3003}
        REACT_APP_CUSTOMER_API_URL: ${REACT_APP_CUSTOMER_API_URL:-http://localhost:3005}
        REACT_APP_CARRIER_API_URL: ${REACT_APP_CARRIER_API_URL:-http://localhost:3004}
        REACT_APP_PRICING_API_URL: ${REACT_APP_PRICING_API_URL:-http://localhost:3006}
        REACT_APP_TRANSLATION_API_URL: ${REACT_APP_TRANSLATION_API_URL:-http://localhost:3007}
    container_name: react-admin
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - auth-service
      - user-service
    networks:
      - fullstack-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
