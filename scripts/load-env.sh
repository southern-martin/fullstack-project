#!/bin/bash

# Script to convert secrets.yaml to .env format for docker-compose
# This allows us to keep secrets in YAML format but use them with docker-compose

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SECRETS_FILE="$PROJECT_ROOT/infrastructure/secrets/secrets.yaml"
ENV_FILE="$PROJECT_ROOT/.env"

echo "🔄 Converting secrets.yaml to .env format..."

# Check if secrets.yaml exists
if [ ! -f "$SECRETS_FILE" ]; then
    echo "❌ Error: secrets.yaml not found!"
    echo "   Run './scripts/init-local-secrets.sh' first to generate secrets"
    exit 1
fi

# Backup existing .env if it exists
if [ -f "$ENV_FILE" ]; then
    cp "$ENV_FILE" "$ENV_FILE.backup"
    echo "📦 Backed up existing .env to .env.backup"
fi

# Create new .env file
echo "# Auto-generated from infrastructure/secrets/secrets.yaml" > "$ENV_FILE"
echo "# DO NOT EDIT THIS FILE DIRECTLY - Edit secrets.yaml instead" >> "$ENV_FILE"
echo "# Generated at: $(date)" >> "$ENV_FILE"
echo "" >> "$ENV_FILE"

# Parse YAML and extract secrets using Python
python3 - <<'PYTHON_SCRIPT' "$SECRETS_FILE" "$ENV_FILE"
import sys
import yaml
import os

secrets_file = sys.argv[1]
env_file = sys.argv[2]

with open(secrets_file, 'r') as f:
    secrets = yaml.safe_load(f)

# Mapping of YAML paths to ENV variable names
mappings = {
    # Shared Database
    ('database', 'shared_user_db', 'root_password'): 'SHARED_DB_ROOT_PASSWORD',
    ('database', 'shared_user_db', 'username'): 'DB_USERNAME',
    ('database', 'shared_user_db', 'password'): 'SHARED_DB_PASSWORD',
    ('database', 'shared_user_db', 'database'): 'DB_NAME',
    
    # Customer Database
    ('database', 'customer_service_db', 'root_password'): 'CUSTOMER_DB_ROOT_PASSWORD',
    ('database', 'customer_service_db', 'username'): 'CUSTOMER_DB_USERNAME',
    ('database', 'customer_service_db', 'password'): 'CUSTOMER_DB_PASSWORD',
    ('database', 'customer_service_db', 'database'): 'CUSTOMER_DB_NAME',
    
    # Carrier Database
    ('database', 'carrier_service_db', 'root_password'): 'CARRIER_DB_ROOT_PASSWORD',
    ('database', 'carrier_service_db', 'username'): 'CARRIER_DB_USERNAME',
    ('database', 'carrier_service_db', 'password'): 'CARRIER_DB_PASSWORD',
    ('database', 'carrier_service_db', 'database'): 'CARRIER_DB_NAME',
    
    # Pricing Database
    ('database', 'pricing_service_db', 'root_password'): 'PRICING_DB_ROOT_PASSWORD',
    ('database', 'pricing_service_db', 'username'): 'PRICING_DB_USERNAME',
    ('database', 'pricing_service_db', 'password'): 'PRICING_DB_PASSWORD',
    ('database', 'pricing_service_db', 'database'): 'PRICING_DB_NAME',
    
    # Redis
    ('redis', 'password'): 'REDIS_PASSWORD',
    
    # JWT
    ('jwt', 'secret'): 'JWT_SECRET',
    ('jwt', 'expiration'): 'JWT_EXPIRATION',
    ('jwt', 'refresh_secret'): 'JWT_REFRESH_SECRET',
    ('jwt', 'refresh_expiration'): 'JWT_REFRESH_EXPIRATION',
}

with open(env_file, 'a') as f:
    f.write("# ==========================================\n")
    f.write("# SECRETS (from secrets.yaml)\n")
    f.write("# ==========================================\n\n")
    
    for yaml_path, env_var in mappings.items():
        value = secrets
        try:
            for key in yaml_path:
                value = value[key]
            f.write(f"{env_var}={value}\n")
        except (KeyError, TypeError):
            print(f"⚠️  Warning: Could not find {'.'.join(yaml_path)} in secrets.yaml")

print("✅ Secrets successfully converted to .env format")
PYTHON_SCRIPT

# Load environment configurations
echo "" >> "$ENV_FILE"
echo "# ==========================================\n# ENVIRONMENT CONFIGURATION\n# ==========================================" >> "$ENV_FILE"
cat "$PROJECT_ROOT/infrastructure/environments/local.env" | grep -v "^#" | grep -v "^\s*$" | grep -v '${' >> "$ENV_FILE" || true

echo "✅ Environment file created: $ENV_FILE"
echo ""
echo "📋 Summary:"
echo "   - Secrets loaded from: $SECRETS_FILE"
echo "   - Environment config from: infrastructure/environments/local.env"
echo "   - Output written to: $ENV_FILE"
echo ""
echo "🚀 You can now start services with:"
echo "   docker-compose -f docker-compose.local.yml up"
echo "   or"
echo "   make start-local"
